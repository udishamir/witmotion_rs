// lib.rs â€” Native Rust driver for Witmotion WT901 (proprietary protocol)

use serialport::SerialPort;
use std::time::Duration;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum FrameType {
    Acceleration,
    Gyroscope,
    Angle,
    Unknown(u8),
}

#[derive(Debug, Clone, Copy)]
pub struct WitmotionFrame {
    pub frame_type: FrameType,
    pub x: i16,
    pub y: i16,
    pub z: i16,
    pub temperature: i16,
}

// ================= SERIAL I/O =================
pub fn open_serial(
    path: &str,
    baud_rate: u32,
) -> Result<Box<dyn SerialPort>, Box<dyn std::error::Error>> {
    let ports = serialport::available_ports()?;
    if !ports.iter().any(|p| p.port_name == path) {
        return Err(format!("Serial device not found: {}", path).into());
    }

    let port = serialport::new(path, baud_rate)
        .timeout(Duration::from_millis(100)) // or 200 for safety
        .open()?;

    Ok(port)
}

pub fn send_config_sequence(port: &mut dyn SerialPort) -> std::io::Result<()> {
    let cmds = [
        [0xFF, 0xAA, 0x27, 0x00], // Enable stream
        [0xFF, 0xAA, 0x02, 0x00], // Enable all outputs
        [0xFF, 0xAA, 0x03, 0x08], // Output rate = 50Hz
    ];

    for cmd in &cmds {
        port.write_all(cmd)?;
        port.flush()?;
        std::thread::sleep(Duration::from_millis(100));
    }

    Ok(())
}

pub fn read_bytes(port: &mut dyn SerialPort, max_len: usize) -> Vec<u8> {
    let mut buffer = vec![0u8; max_len];
    match port.read(&mut buffer) {
        Ok(n) => {
            buffer.truncate(n);
            buffer
        }
        Err(_) => vec![],
    }
}

// ================= PROTOCOL CONSTANTS =================

pub const WIT_ACC: u8 = 0x51;
pub const WIT_GYRO: u8 = 0x52;
pub const WIT_ANGLE: u8 = 0x53;

pub const RSW_ACC: u16 = 0x002;
pub const RSW_GYRO: u16 = 0x004;
pub const RSW_ANGLE: u16 = 0x008;

// ================= CRC & CHECKSUM =================

pub static AUCH_CRCLO: [u8; 256] = [
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
    0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
    0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
    0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
    0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
    0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
    0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
    0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
    0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40,
];

pub static AUCH_CRCHI: [u8; 256] = [
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
];

pub fn crc16(data: &[u8]) -> u16 {
    let mut crc_lo: u8 = 0xff;
    let mut crc_hi: u8 = 0xff;
    for &byte in data {
        let u_index = (crc_hi ^ byte) as usize;
        crc_hi = crc_lo ^ AUCH_CRCHI[u_index];
        crc_lo = AUCH_CRCLO[u_index];
    }
    ((crc_hi as u16) << 8) | crc_lo as u16
}

pub fn checksum_valid(data: &[u8]) -> bool {
    if data.len() < 11 {
        return false;
    }

    let sum: u16 = data[..10].iter().map(|&b| b as u16).sum();
    data[10] == (sum & 0xFF) as u8
}

// ================= FRAME PARSING =================
pub fn parse_2bytes_frame(data: &[u8]) -> Option<[i16; 3]> {
    if data.len() != 11 || data[0] != 0x55 {
        return None;
    }
    if !checksum_valid(data) {
        return None;
    }
    Some([
        i16::from_le_bytes([data[2], data[3]]),
        i16::from_le_bytes([data[4], data[5]]),
        i16::from_le_bytes([data[6], data[7]]),
    ])
}

pub fn parse_frame(data: &[u8]) -> Option<WitmotionFrame> {
    if data.len() != 11 || data[0] != 0x55 || !checksum_valid(data) {
        return None;
    }

    let id = data[1];
    let x = i16::from_le_bytes([data[2], data[3]]);
    let y = i16::from_le_bytes([data[4], data[5]]);
    let z = i16::from_le_bytes([data[6], data[7]]);
    let temp = i16::from_le_bytes([data[8], data[9]]);
    let frame_type = match id {
        0x51 => FrameType::Acceleration,
        0x52 => FrameType::Gyroscope,
        0x53 => FrameType::Angle,
        other => FrameType::Unknown(other),
    };

    Some(WitmotionFrame {
        frame_type,
        x,
        y,
        z,
        temperature: temp,
    })
}

pub fn extract_frames(buffer: &[u8]) -> Vec<WitmotionFrame> {
    let mut frames = Vec::new();
    let mut i = 0;
    while i + 11 <= buffer.len() {
        if buffer[i] == 0x55 {
            if let Some(frame) = parse_frame(&buffer[i..i + 11]) {
                frames.push(frame);
                i += 11;
                continue;
            }
        }
        i += 1;
    }
    frames
}
